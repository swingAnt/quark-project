import { PropertyDeclaration } from "./models";
import { EventHandler } from "./eventController";
export interface Ref<T = any> {
    current: T;
}
export declare function createRef<T = any>(): Ref<T | null>;
export declare const Fragment: any;
export declare const property: (options?: PropertyDeclaration) => (target: unknown, name: string) => void;
export declare const state: () => (target: unknown, name: string) => void;
export declare function customElement(params: string | {
    tag: string;
    style?: string;
}): (target: typeof QuarkElement) => void;
export declare class QuarkElement extends HTMLElement {
    static h: any;
    static Fragment: any;
    protected static getPropertyDescriptor(name: string, options: PropertyDeclaration): (defaultValue?: any) => PropertyDescriptor;
    protected static getStateDescriptor(name: string): () => PropertyDescriptor;
    static createProperty(name: string, options: PropertyDeclaration): void;
    static createState(name: string): void;
    private eventController;
    private rootPatch;
    private _render;
    private _updateProperty;
    private _updateBooleanProperty;
    $on: (eventName: string, eventHandler: EventHandler, el?: Element) => void;
    $emit<T>(eventName: string, customEventInit?: CustomEventInit<T>): boolean;
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(propName: string, oldValue: string, newValue: string): boolean;
    componentDidUpdate(propName: string, oldValue: any, newValue: any): void;
    render(): any;
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, value: string): void;
    disconnectedCallback(): void;
}
